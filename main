# Hangman Game

import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)


wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    for letter in secret_word:
        if letter not in letters_guessed:
            return False
    return True


def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    guessed_word = ""
    for letter in secret_word:
        if letter not in letters_guessed:
            guessed_word += "_"
        else:
            guessed_word += letter
    return guessed_word


def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    available_letters = ""
    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    for letter in alphabet:
        if letter not in letters_guessed:
            available_letters += letter
    return available_letters

    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    print("Welcome to the game Hangman!")

    target_word = secret_word
    print("I am thinking of a word that is " + str(len(target_word)) + " letters long.")
    guesses = 6
    warnings = 3
    letters_guessed = []
    print("You have 3 warnings left")
    print("------------")

    while guesses > 0:
      print("You have " + str(guesses) + " guesses left.")
      print("Available letters: " + get_available_letters(letters_guessed))
      guess = input("Please guess a letter: ")
      # Checks if it's a valid input
      if type(guess) != str or len(guess) > 1:
        if warnings > 0:
          warnings -= 1
          print("Oops! That is not a valid letter. You have " + str(warnings) + " warnings left: " +  get_guessed_word(target_word,letters_guessed))
        else:
          guesses -= 1
          print("Oops! That is not a valid letter. You have no warnings left so you lose one guess: " + get_guessed_word(target_word,letters_guessed))            
      # Checks if it has been already guessed
      elif guess in letters_guessed:
        if warnings > 0:
          warnings -= 1
          print("Oops! You've already guessed that letter. You have " + str(warnings) + " warnings left: " +  get_guessed_word(target_word,letters_guessed))
        else:
          guesses -= 1
          print("Oops! You've already guessed that letter. You have no warnings left so you lose one guess: " + get_guessed_word(target_word,letters_guessed))
      # Handles when the guess is correct
      elif guess in target_word:
        letters_guessed.append(guess)
        print("Good guess: " + get_guessed_word(target_word,letters_guessed))
        if is_word_guessed(target_word,letters_guessed):
            print("------------")
            print("Congratulations, you won!")
            print("Your total score for this game is: " + str(score(guesses,target_word)))
            return
      # Handles when the guess is incorrect
      else:
        print("Oops! That letter is not in my word: " + get_guessed_word(target_word,letters_guessed))
        guesses -= 1
      print("------------")
    print("Sorry you ran out of guesses. The word was " + str(target_word))
         

def score(guesses_left: int, word: str):
  unique_letters = 0
  letter_list = []
  for letter in word:
    if letter not in letter_list:
      unique_letters += 1
      letter_list.append(letter)
  return unique_letters * guesses_left


def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    if len(my_word) == len(other_word):
      is_match = True
      for i in range(len(my_word)):
         if my_word[i] != "_" and my_word[i] != other_word[i]:
            is_match = False
      if is_match:
         return True
    return False
      

def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    list = ""
    for word in wordlist:
       if match_with_gaps(my_word,word):
          duplicate = False
          for i in range(len(word)):
             if my_word[i] == "_" and word[i] in my_word:
                duplicate =  True
          if not duplicate:
             list += word + " "
    if len(list) == 0:
       print("No matches found")
    else:
       print(list)


def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    print("Welcome to the game Hangman!")

    target_word = secret_word
    print("I am thinking of a word that is " + str(len(target_word)) + " letters long.")
    guesses = 6
    warnings = 3
    letters_guessed = []
    print("You have 3 warnings left")
    print("------------")

    while guesses > 0:
      print("You have " + str(guesses) + " guesses left.")
      print("Available letters: " + get_available_letters(letters_guessed))
      guess = input("Please guess a letter: ")
      if guess == "*":
         print("Possible word matches are: ")
         show_possible_matches(get_guessed_word(target_word,letters_guessed))
      # Checks if it's a valid input
      elif type(guess) != str or len(guess) > 1:
        if warnings > 0:
          warnings -= 1
          print("Oops! That is not a valid letter. You have " + str(warnings) + " warnings left: " +  get_guessed_word(target_word,letters_guessed))
        else:
          guesses -= 1
          print("Oops! That is not a valid letter. You have no warnings left so you lose one guess: " + get_guessed_word(target_word,letters_guessed))            
      # Checks if it has been already guessed
      elif guess in letters_guessed:
        if warnings > 0:
          warnings -= 1
          print("Oops! You've already guessed that letter. You have " + str(warnings) + " warnings left: " +  get_guessed_word(target_word,letters_guessed))
        else:
          guesses -= 1
          print("Oops! You've already guessed that letter. You have no warnings left so you lose one guess: " + get_guessed_word(target_word,letters_guessed))
      # Handles when the guess is correct
      elif guess in target_word:
        letters_guessed.append(guess)
        print("Good guess: " + get_guessed_word(target_word,letters_guessed))
        if is_word_guessed(target_word,letters_guessed):
            print("------------")
            print("Congratulations, you won!")
            print("Your total score for this game is: " + str(score(guesses,target_word)))
            return
      # Handles when the guess is incorrect
      else:
        print("Oops! That letter is not in my word: " + get_guessed_word(target_word,letters_guessed))
        guesses -= 1
      print("------------")
    print("Sorry you ran out of guesses. The word was " + str(target_word))
    

if __name__ == "__main__":

    #secret_word = choose_word(wordlist)
    #hangman(secret_word)
    
    secret_word = choose_word(wordlist)
    hangman_with_hints(secret_word)
